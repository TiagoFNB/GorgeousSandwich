{
	"info": {
		"_postman_id": "c144a80e-0194-4285-b9ae-ee6e89af5b22",
		"name": "GourgeosSandwichTests-Promotions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13123726"
	},
	"item": [
		{
			"name": "Promotion",
			"item": [
				{
					"name": "Setup",
					"item": [
						{
							"name": "Create Sandwich 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Create Sandwich 01 - Dados normais\", function () {\r",
											"\r",
											" pm.response.to.have.status(200);\r",
											" pm.response.to.not.be.error;\r",
											" pm.response.to.be.withBody;\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"\r",
											" pm.expect(jsonData.data.create.id.id).to.not.be.undefined;\r",
											" pm.expect(jsonData.data.create.designation.designation).to.eql(\"BigGorgeous\");\r",
											" pm.expect(jsonData.data.create.price.price).to.eql(10.5);\r",
											" pm.expect(jsonData.data.create.descriptionList.length).to.eql(2);\r",
											"\r",
											"pm.collectionVariables.set(\"idSandwich\", jsonData.data.create.id.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\r\n    create(sandwichDTO : {sandwichDesignation: \"BigGorgeous\", sellingPrice: 10.5, descriptionList: [\"Ham and Cheese\", \"Fiambre e queijo\"]}) {\r\n        id {id}\r\n        designation {designation}\r\n        price {price}\r\n        descriptionList {description, language { language }}\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:9000/sandwich",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										"sandwich"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Count Promotions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Lista Promotions 01 - Obter quantidade antes de criar\", function () {\r",
									"\r",
									" pm.response.to.have.status(200);\r",
									" pm.response.to.not.be.error;\r",
									" pm.response.to.be.withBody;\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									" pm.expect(jsonData).to.not.be.undefined;\r",
									"\r",
									" pm.collectionVariables.set(\"countTeste\", jsonData.data.getList.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n    getList {\r\n        id {id}\r\n        type\r\n        percentage {percentage}\r\n        sandwichId {sandwichId}\r\n        period {\r\n            promotionPeriodBeginning{promotionPeriodBeginning},\r\n         promotionPeriodEnd{promotionPeriodEnd}}\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:9000/promotion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Promotion 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Promotion 01 - Dados normais\", function () {\r",
									"\r",
									" pm.response.to.have.status(200);\r",
									" pm.response.to.not.be.error;\r",
									" pm.response.to.be.withBody;\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									" pm.expect(jsonData.data.create.id.id).to.not.be.undefined;\r",
									" pm.expect(jsonData.data.create.percentage.percentage).to.eql(30.0);\r",
									" pm.expect(jsonData.data.create.period.promotionPeriodBeginning.promotionPeriodBeginning).to.eql(\"29-07-2023\");\r",
									" pm.expect(jsonData.data.create.period.promotionPeriodEnd.promotionPeriodEnd).to.eql(\"22-12-2023\");\r",
									" pm.expect(jsonData.data.create.type).to.eql(\"GLOBAL\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($sandwichInternalId : String){\r\n    create(promotionDTO : {promotionPercentage: 30.0, promotionType: \"GLOBAL\", promotionPeriod: {promotionPeriodBeginning: \"29-07-2023\", promotionPeriodEnd: \"22-12-2023\"}, sandwichInternalId:$sandwichInternalId }) {\r\n        id {id}\r\n        type\r\n        percentage {percentage}\r\n        sandwichId {sandwichId}\r\n        period {\r\n            promotionPeriodBeginning{promotionPeriodBeginning},\r\n         promotionPeriodEnd{promotionPeriodEnd}}   \r\n    }\r\n}",
								"variables": "{\"sandwichInternalId\" : \"{{idSandwich}}\"}"
							}
						},
						"url": {
							"raw": "http://localhost:9000/promotion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Promotion 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Promotion 02 - Percentagem maior que 100\", function () {\r",
									"\r",
									" pm.response.to.have.status(200);\r",
									" pm.response.to.not.be.error;\r",
									" pm.response.to.be.withBody;\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									" pm.expect(jsonData.data.create).to.be.null;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    create(promotionDTO : {promotionPercentage: 200.0, promotionType: \"GLOBAL\", promotionPeriod: {promotionPeriodBeginning: \"29-07-2023\", promotionPeriodEnd: \"22-12-2023\"}, sandwichInternalId:\"{{idSandwich}}\" }) {\r\n        id {id}\r\n        type\r\n        percentage {percentage}\r\n        sandwichId {sandwichId}\r\n        period {\r\n            promotionPeriodBeginning{promotionPeriodBeginning},\r\n         promotionPeriodEnd{promotionPeriodEnd}}   \r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:9000/promotion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Promotion 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Promotion 03 - Dados normais\", function () {\r",
									"\r",
									" pm.response.to.have.status(200);\r",
									" pm.response.to.not.be.error;\r",
									" pm.response.to.be.withBody;\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									" pm.expect(jsonData.data.create).to.be.null;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    create(promotionDTO : {promotionPercentage: 30.0, promotionType: \"GLOBAL\", promotionPeriod: {promotionPeriodBeginning: \"30-02-2021\", promotionPeriodEnd: \"22-12-2023\"}, sandwichInternalId:\"{{idSandwich}}\" }) {\r\n        id {id}\r\n        type\r\n        percentage {percentage}\r\n        sandwichId {sandwichId}\r\n        period {\r\n            promotionPeriodBeginning{promotionPeriodBeginning},\r\n         promotionPeriodEnd{promotionPeriodEnd}}   \r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:9000/promotion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"promotion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count Promotion 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Lista Promotions 02 - Obter quantidade apos criar\", function () {\r",
									"\r",
									" pm.response.to.have.status(200);\r",
									" pm.response.to.not.be.error;\r",
									" pm.response.to.be.withBody;\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									" pm.expect(jsonData).to.not.be.undefined;\r",
									"\r",
									" var count = pm.collectionVariables.get(\"countTeste\");\r",
									" pm.expect(jsonData.data.getList.length).to.eql(count+1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n    getList {\r\n        id {id}\r\n        type\r\n        percentage {percentage}\r\n        sandwichId {sandwichId}\r\n        period {\r\n            promotionPeriodBeginning{promotionPeriodBeginning},\r\n         promotionPeriodEnd{promotionPeriodEnd}}\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://localhost:9000/promotion",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"promotion"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "loginToken",
			"value": ""
		},
		{
			"key": "countTeste",
			"value": ""
		},
		{
			"key": "idSandwich",
			"value": ""
		}
	]
}